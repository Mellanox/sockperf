/*
 * Copyright (c) 2021-2021 Mellanox Technologies Ltd.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of the Mellanox Technologies Ltd nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 */

#include "common.h"

#include "tls.h"

#if defined(DEFINED_TLS)

static unsigned char cert_der[] = {
    0x30, 0x82, 0x02, 0xe3, 0x30, 0x82, 0x01, 0xcb, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x27,
    0x55, 0x0d, 0x5c, 0x52, 0x52, 0xe5, 0xe3, 0x85, 0x96, 0x03, 0x00, 0x19, 0xe0, 0x5f, 0xc6, 0x38,
    0x0a, 0x91, 0x63, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b,
    0x05, 0x00, 0x30, 0x00, 0x30, 0x20, 0x17, 0x0d, 0x32, 0x31, 0x30, 0x32, 0x30, 0x34, 0x31, 0x31,
    0x34, 0x37, 0x31, 0x38, 0x5a, 0x18, 0x0f, 0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31,
    0x31, 0x34, 0x37, 0x31, 0x38, 0x5a, 0x30, 0x00, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09,
    0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00,
    0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xd7, 0xd9, 0x7a, 0x3f, 0x53, 0xae, 0x78,
    0x36, 0x00, 0x9d, 0x51, 0x54, 0x56, 0x9d, 0xef, 0xe7, 0x18, 0x56, 0x3d, 0x2c, 0x2d, 0xf7, 0x38,
    0x99, 0x74, 0xa6, 0x43, 0xc7, 0xd3, 0x6a, 0xe5, 0x7e, 0xc7, 0x96, 0x8f, 0x0b, 0x69, 0xc4, 0x00,
    0xe3, 0x33, 0xb5, 0xff, 0xcc, 0xd5, 0x9f, 0xcd, 0x91, 0x4f, 0x31, 0x42, 0x07, 0xb6, 0xae, 0xcc,
    0x4e, 0x73, 0x61, 0x17, 0xc7, 0x02, 0xcd, 0x04, 0xfb, 0x48, 0xcb, 0x89, 0xda, 0x65, 0xaf, 0x54,
    0x06, 0xb5, 0xf4, 0xcc, 0xf6, 0xa9, 0x1b, 0x63, 0xc1, 0x43, 0xae, 0x73, 0xef, 0xf2, 0xcd, 0xac,
    0x0e, 0x33, 0xc6, 0x97, 0x59, 0x2d, 0x12, 0x58, 0x49, 0x4d, 0xdc, 0x90, 0x9a, 0x4a, 0xf3, 0x87,
    0xbc, 0x58, 0x20, 0x93, 0x57, 0x8a, 0x4f, 0x0b, 0xe2, 0xa5, 0x32, 0x3f, 0xa7, 0x6e, 0x78, 0x3c,
    0xe8, 0xf1, 0x7b, 0x90, 0xb2, 0x90, 0xac, 0xbe, 0x68, 0xb2, 0x33, 0x25, 0xef, 0xe8, 0xdf, 0x7c,
    0x2c, 0x51, 0x59, 0xe3, 0x8f, 0x3d, 0x38, 0xaf, 0xfa, 0x54, 0x88, 0xd1, 0x49, 0x33, 0x11, 0xa5,
    0xb0, 0xe6, 0xf9, 0x6b, 0xda, 0xf1, 0x76, 0xf7, 0x69, 0xaf, 0x34, 0x70, 0x44, 0x68, 0x1c, 0xfb,
    0xa7, 0x4e, 0x91, 0x56, 0x69, 0x2a, 0xc6, 0xdd, 0xe4, 0xe4, 0x5e, 0xb8, 0x78, 0xc9, 0x87, 0xfa,
    0x7a, 0xa1, 0x9f, 0x1b, 0x63, 0x4e, 0x98, 0xf8, 0xeb, 0x13, 0x36, 0x1e, 0x01, 0x64, 0x98, 0x4a,
    0xfc, 0x15, 0x23, 0x9f, 0xdc, 0x21, 0x64, 0x3a, 0x55, 0xfd, 0x2a, 0x0d, 0xc0, 0x10, 0x14, 0xc1,
    0x16, 0x3a, 0xfc, 0xee, 0x11, 0xac, 0xcb, 0xb8, 0xaa, 0x33, 0xfb, 0xcb, 0xb1, 0x46, 0x06, 0x4f,
    0xe8, 0xd2, 0xaa, 0xd4, 0x9d, 0x79, 0x4b, 0x36, 0x01, 0x77, 0x50, 0x2f, 0x72, 0x49, 0x6d, 0x70,
    0xfb, 0xcd, 0x4e, 0xa6, 0x0e, 0x5c, 0x49, 0xf6, 0x91, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x53,
    0x30, 0x51, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x3b, 0xaf, 0xe7,
    0xc3, 0xb3, 0x96, 0x66, 0x83, 0x88, 0xac, 0xde, 0x0b, 0xca, 0x6c, 0x02, 0xc0, 0x15, 0x5a, 0x43,
    0x82, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x3b, 0xaf,
    0xe7, 0xc3, 0xb3, 0x96, 0x66, 0x83, 0x88, 0xac, 0xde, 0x0b, 0xca, 0x6c, 0x02, 0xc0, 0x15, 0x5a,
    0x43, 0x82, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03,
    0x01, 0x01, 0xff, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b,
    0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x32, 0x70, 0xa1, 0x0c, 0x74, 0x2f, 0x30, 0xb1, 0x00,
    0x64, 0xfd, 0x9a, 0xbe, 0x6f, 0xf4, 0x99, 0xd8, 0x3b, 0xb5, 0xf9, 0x48, 0x91, 0x56, 0x4b, 0x7f,
    0xdb, 0x28, 0x8d, 0x0c, 0x5f, 0xff, 0x00, 0xd8, 0xe2, 0x35, 0x74, 0xa5, 0xda, 0xe5, 0x3a, 0x4d,
    0x36, 0xbc, 0x8c, 0xea, 0x84, 0x11, 0xba, 0x72, 0xe8, 0xdc, 0xb9, 0xed, 0x50, 0xf7, 0x72, 0x48,
    0xaa, 0x6c, 0xb8, 0xdb, 0xf9, 0x36, 0x35, 0xf0, 0x9e, 0x3b, 0x93, 0xf4, 0xc6, 0x1d, 0xa3, 0x5e,
    0x82, 0xd5, 0x4c, 0x29, 0x58, 0x0f, 0x88, 0xc9, 0x45, 0x1a, 0x6c, 0x68, 0xac, 0x14, 0x84, 0xe9,
    0xf5, 0x14, 0x91, 0xd4, 0xdb, 0xf2, 0x0d, 0x25, 0x1d, 0x87, 0xb0, 0x8a, 0xfb, 0xa9, 0xda, 0x6d,
    0x6e, 0x02, 0x3c, 0x89, 0xc6, 0x1b, 0xa4, 0xbd, 0x3b, 0x0f, 0x33, 0xf7, 0x8d, 0xd2, 0x8f, 0xe4,
    0x50, 0x8e, 0x7b, 0xe4, 0x0f, 0x77, 0x77, 0x5a, 0x0e, 0xd2, 0x5f, 0x98, 0xdd, 0x67, 0x76, 0x4d,
    0xf2, 0x39, 0x47, 0x50, 0x42, 0x28, 0x63, 0x61, 0xc4, 0x5b, 0x52, 0x87, 0xa9, 0xa0, 0xf9, 0x8d,
    0xdd, 0x80, 0xa3, 0xb7, 0x78, 0xd5, 0xf1, 0x8e, 0xbf, 0x71, 0xb3, 0x8f, 0x20, 0xa0, 0x90, 0x2e,
    0xe3, 0xb9, 0xca, 0x2c, 0xf6, 0xab, 0xd5, 0xb7, 0xfc, 0xf2, 0xc4, 0x2d, 0x85, 0xa5, 0x5c, 0x4e,
    0x52, 0xd7, 0xea, 0x0c, 0x03, 0xdc, 0xd5, 0xfe, 0x93, 0x74, 0x5a, 0x3b, 0x61, 0x95, 0xf6, 0xcc,
    0xa5, 0x5b, 0x49, 0x9d, 0x79, 0x81, 0x87, 0xb5, 0xa0, 0x5a, 0x13, 0x3e, 0x92, 0x08, 0x00, 0x4b,
    0x2f, 0x10, 0xa8, 0x22, 0x92, 0x3a, 0x42, 0x74, 0x48, 0x33, 0x41, 0xe9, 0x8d, 0x50, 0xc7, 0x80,
    0xdb, 0x41, 0xab, 0x79, 0xd9, 0x0c, 0x44, 0x6f, 0x4e, 0x38, 0x22, 0x25, 0xb1, 0xd6, 0xb6, 0xc1,
    0x0a, 0x1c, 0x89, 0xcd, 0x66, 0xbf, 0xaa
};

static unsigned char key_der[] = {
    0x30, 0x82, 0x04, 0xa5, 0x02, 0x01, 0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xd7, 0xd9, 0x7a, 0x3f,
    0x53, 0xae, 0x78, 0x36, 0x00, 0x9d, 0x51, 0x54, 0x56, 0x9d, 0xef, 0xe7, 0x18, 0x56, 0x3d, 0x2c,
    0x2d, 0xf7, 0x38, 0x99, 0x74, 0xa6, 0x43, 0xc7, 0xd3, 0x6a, 0xe5, 0x7e, 0xc7, 0x96, 0x8f, 0x0b,
    0x69, 0xc4, 0x00, 0xe3, 0x33, 0xb5, 0xff, 0xcc, 0xd5, 0x9f, 0xcd, 0x91, 0x4f, 0x31, 0x42, 0x07,
    0xb6, 0xae, 0xcc, 0x4e, 0x73, 0x61, 0x17, 0xc7, 0x02, 0xcd, 0x04, 0xfb, 0x48, 0xcb, 0x89, 0xda,
    0x65, 0xaf, 0x54, 0x06, 0xb5, 0xf4, 0xcc, 0xf6, 0xa9, 0x1b, 0x63, 0xc1, 0x43, 0xae, 0x73, 0xef,
    0xf2, 0xcd, 0xac, 0x0e, 0x33, 0xc6, 0x97, 0x59, 0x2d, 0x12, 0x58, 0x49, 0x4d, 0xdc, 0x90, 0x9a,
    0x4a, 0xf3, 0x87, 0xbc, 0x58, 0x20, 0x93, 0x57, 0x8a, 0x4f, 0x0b, 0xe2, 0xa5, 0x32, 0x3f, 0xa7,
    0x6e, 0x78, 0x3c, 0xe8, 0xf1, 0x7b, 0x90, 0xb2, 0x90, 0xac, 0xbe, 0x68, 0xb2, 0x33, 0x25, 0xef,
    0xe8, 0xdf, 0x7c, 0x2c, 0x51, 0x59, 0xe3, 0x8f, 0x3d, 0x38, 0xaf, 0xfa, 0x54, 0x88, 0xd1, 0x49,
    0x33, 0x11, 0xa5, 0xb0, 0xe6, 0xf9, 0x6b, 0xda, 0xf1, 0x76, 0xf7, 0x69, 0xaf, 0x34, 0x70, 0x44,
    0x68, 0x1c, 0xfb, 0xa7, 0x4e, 0x91, 0x56, 0x69, 0x2a, 0xc6, 0xdd, 0xe4, 0xe4, 0x5e, 0xb8, 0x78,
    0xc9, 0x87, 0xfa, 0x7a, 0xa1, 0x9f, 0x1b, 0x63, 0x4e, 0x98, 0xf8, 0xeb, 0x13, 0x36, 0x1e, 0x01,
    0x64, 0x98, 0x4a, 0xfc, 0x15, 0x23, 0x9f, 0xdc, 0x21, 0x64, 0x3a, 0x55, 0xfd, 0x2a, 0x0d, 0xc0,
    0x10, 0x14, 0xc1, 0x16, 0x3a, 0xfc, 0xee, 0x11, 0xac, 0xcb, 0xb8, 0xaa, 0x33, 0xfb, 0xcb, 0xb1,
    0x46, 0x06, 0x4f, 0xe8, 0xd2, 0xaa, 0xd4, 0x9d, 0x79, 0x4b, 0x36, 0x01, 0x77, 0x50, 0x2f, 0x72,
    0x49, 0x6d, 0x70, 0xfb, 0xcd, 0x4e, 0xa6, 0x0e, 0x5c, 0x49, 0xf6, 0x91, 0x02, 0x03, 0x01, 0x00,
    0x01, 0x02, 0x82, 0x01, 0x01, 0x00, 0xca, 0xa2, 0xc3, 0x2e, 0x32, 0x4c, 0x27, 0x54, 0x63, 0x2d,
    0x4d, 0x4d, 0xc4, 0xe7, 0x0e, 0x72, 0x40, 0x19, 0xad, 0xe2, 0x0c, 0xe0, 0xfb, 0x44, 0xad, 0x0a,
    0xed, 0xb4, 0xe9, 0xd8, 0x7f, 0xcc, 0x8e, 0x68, 0xdc, 0xaf, 0x55, 0x42, 0x89, 0xa6, 0xc2, 0x44,
    0x08, 0xf9, 0xee, 0x4e, 0xd0, 0x78, 0xab, 0x04, 0xce, 0x3d, 0x59, 0x96, 0x2d, 0xfd, 0x34, 0x3a,
    0x21, 0x4d, 0x56, 0x66, 0xcc, 0x57, 0x6f, 0x56, 0x8d, 0x7a, 0xf7, 0x5d, 0x2a, 0xa0, 0x06, 0x2f,
    0xe4, 0x3f, 0x68, 0x30, 0x6b, 0x6c, 0xe3, 0x32, 0x22, 0x6b, 0x4f, 0xe1, 0x1f, 0xb6, 0x51, 0x8b,
    0x0d, 0x48, 0xcd, 0x94, 0x5c, 0x47, 0xad, 0x0d, 0xf4, 0xbe, 0xb4, 0xc0, 0x7d, 0x5c, 0x26, 0xcb,
    0xa6, 0x27, 0x57, 0x93, 0xaf, 0xcf, 0xbd, 0x50, 0x38, 0x0b, 0xe2, 0x1c, 0x84, 0xea, 0x16, 0xd1,
    0xee, 0xdc, 0x84, 0x0f, 0x77, 0xcc, 0x2d, 0x1f, 0x27, 0xf2, 0x1c, 0xcc, 0x68, 0x03, 0xb2, 0xca,
    0x0d, 0x53, 0x63, 0x8c, 0x4b, 0x00, 0xdd, 0x12, 0x8b, 0xbc, 0x88, 0x7e, 0x0f, 0x6d, 0x65, 0xa5,
    0x56, 0xb6, 0xec, 0x66, 0xcd, 0x83, 0x1c, 0x6d, 0xdf, 0x59, 0x1b, 0x28, 0xd0, 0xd5, 0x74, 0x26,
    0x2a, 0x50, 0xa0, 0xf4, 0x18, 0x49, 0xee, 0x08, 0xad, 0xf1, 0x4c, 0xdb, 0xd7, 0x97, 0x82, 0x13,
    0x21, 0xf3, 0xbb, 0xf1, 0x67, 0x35, 0xdb, 0x2c, 0x37, 0x9e, 0xe4, 0x98, 0x28, 0x94, 0xaa, 0xf0,
    0x64, 0x86, 0x22, 0x35, 0xbd, 0xc3, 0xcc, 0x70, 0x4d, 0x3a, 0x40, 0x72, 0x4f, 0xf1, 0xd3, 0x3a,
    0xaa, 0x82, 0x2d, 0x22, 0xe0, 0x3c, 0x53, 0x02, 0x18, 0xb6, 0x90, 0x6a, 0xc6, 0xd6, 0xe7, 0x4e,
    0x47, 0xb4, 0xc1, 0xca, 0xe2, 0xa5, 0x1f, 0xbc, 0x27, 0x69, 0xa6, 0x30, 0x37, 0x3b, 0x36, 0x17,
    0xc6, 0x4c, 0x36, 0xeb, 0x06, 0x01, 0x02, 0x81, 0x81, 0x00, 0xff, 0x8d, 0x09, 0xc8, 0xbd, 0x2f,
    0xb3, 0x4b, 0x81, 0x94, 0x83, 0x2e, 0xe8, 0x36, 0xd5, 0x96, 0xe0, 0x05, 0x17, 0x53, 0xb5, 0xb2,
    0x58, 0xfe, 0xc9, 0xc3, 0x90, 0x8f, 0x67, 0x21, 0xf6, 0xce, 0xcf, 0x53, 0xc6, 0xad, 0x6a, 0xed,
    0xc8, 0xaa, 0xf7, 0xad, 0x8f, 0x1f, 0x00, 0xb4, 0x8c, 0x2a, 0xf8, 0xda, 0xb3, 0xfa, 0x95, 0x5d,
    0x04, 0x0a, 0x61, 0xb1, 0xb7, 0xb9, 0x4c, 0xcb, 0xbf, 0x69, 0xbd, 0x44, 0xff, 0xd6, 0xd9, 0x4b,
    0x73, 0x29, 0x13, 0xa5, 0x37, 0x26, 0x2b, 0x32, 0x2b, 0xd0, 0x16, 0xf1, 0x72, 0x4f, 0xbb, 0x0e,
    0xf3, 0xfa, 0xbe, 0xc7, 0x63, 0xcd, 0xfc, 0xfb, 0x09, 0xa8, 0x39, 0x41, 0x1d, 0xd1, 0x7d, 0x4e,
    0x52, 0x87, 0x2b, 0xaf, 0x96, 0x1b, 0xb1, 0x83, 0x5e, 0x8f, 0x28, 0xd6, 0x8a, 0xc9, 0xf7, 0xc6,
    0x9b, 0xf2, 0xbc, 0x72, 0x83, 0x82, 0xd4, 0x3c, 0x12, 0x71, 0x02, 0x81, 0x81, 0x00, 0xd8, 0x3a,
    0x94, 0x4c, 0x55, 0x32, 0xa9, 0xa8, 0x8e, 0x92, 0x11, 0x5b, 0xd8, 0xdd, 0x17, 0xe2, 0xd7, 0x51,
    0x5d, 0x10, 0xf8, 0xba, 0x71, 0xd5, 0x8a, 0x2f, 0x8b, 0x03, 0x6d, 0x59, 0x28, 0xd3, 0x1f, 0x38,
    0x1c, 0xfd, 0x13, 0x27, 0x80, 0x62, 0xc5, 0xd4, 0x5c, 0x41, 0x5b, 0xd6, 0x52, 0x73, 0x3c, 0xbd,
    0x00, 0x56, 0x18, 0xfb, 0xe7, 0xb0, 0xd5, 0x24, 0xa8, 0x98, 0x22, 0xe8, 0xd1, 0xb3, 0xb0, 0x7f,
    0xe6, 0x7c, 0x03, 0x8c, 0xdd, 0xc3, 0x38, 0xa9, 0xbd, 0x23, 0x3b, 0x83, 0x3d, 0x87, 0xdf, 0xf8,
    0x94, 0x9a, 0xb2, 0x19, 0x91, 0x6c, 0x35, 0xd5, 0x68, 0x53, 0x13, 0x47, 0x00, 0x70, 0xa8, 0x9a,
    0x84, 0x3a, 0xa0, 0xf0, 0x61, 0xab, 0x46, 0x5a, 0x12, 0x3e, 0x37, 0xb5, 0xea, 0x21, 0x03, 0x65,
    0x01, 0x24, 0x92, 0xde, 0xcf, 0xb1, 0xf7, 0xe4, 0xfd, 0xec, 0xc7, 0x83, 0xf6, 0x21, 0x02, 0x81,
    0x81, 0x00, 0xe4, 0xfd, 0x17, 0x68, 0x56, 0x05, 0xf9, 0x2e, 0x4e, 0x85, 0xaa, 0x6b, 0x0c, 0xcf,
    0x9d, 0xe2, 0x9d, 0x08, 0x52, 0xd7, 0xc2, 0xb7, 0x76, 0x41, 0x90, 0xbf, 0xf9, 0xb8, 0x56, 0x1c,
    0xbc, 0x10, 0xa2, 0xfd, 0x19, 0xc9, 0x69, 0x48, 0x7b, 0x08, 0x9f, 0xf9, 0x58, 0x86, 0xda, 0x55,
    0xee, 0x47, 0xcf, 0x48, 0x02, 0x00, 0x27, 0x78, 0xfa, 0xd6, 0xe6, 0xa5, 0x9d, 0xd0, 0x9f, 0xfc,
    0xee, 0x9f, 0x2c, 0x67, 0x38, 0xac, 0xe7, 0x77, 0x51, 0x50, 0xdc, 0x76, 0xae, 0x0d, 0x38, 0xa5,
    0xb3, 0x56, 0xba, 0x48, 0x4e, 0x3b, 0x1d, 0x8e, 0x0f, 0x97, 0x7e, 0xfe, 0x21, 0xf3, 0x81, 0x9d,
    0xdd, 0x10, 0x6d, 0x85, 0x68, 0xd7, 0xbf, 0xe5, 0xbf, 0xd3, 0xb9, 0x94, 0x93, 0xf8, 0x6a, 0xbf,
    0x21, 0xab, 0x3c, 0x57, 0xca, 0x73, 0xa1, 0xdf, 0xc8, 0xfb, 0xe0, 0x5a, 0xe8, 0x77, 0x02, 0x00,
    0x76, 0x31, 0x02, 0x81, 0x80, 0x71, 0x20, 0xb4, 0xd5, 0xfa, 0xfd, 0x36, 0xa6, 0x69, 0x71, 0x22,
    0x83, 0xdb, 0x42, 0x51, 0x6c, 0xed, 0x1a, 0x34, 0x86, 0xdc, 0x9b, 0x2f, 0x53, 0x79, 0xa8, 0xc6,
    0x22, 0x54, 0xe3, 0x80, 0xe8, 0x74, 0x3c, 0xf7, 0x6d, 0xb0, 0xc7, 0xc9, 0xf3, 0xe3, 0x6c, 0xe7,
    0x97, 0x8a, 0x64, 0xe7, 0x5e, 0x43, 0x38, 0xdf, 0x24, 0x2c, 0x8e, 0x1e, 0xf9, 0xf5, 0x89, 0xe8,
    0x6b, 0x30, 0x58, 0x7e, 0xde, 0x74, 0x49, 0x76, 0x5d, 0x0b, 0xbe, 0x77, 0x87, 0xdb, 0xed, 0x72,
    0x77, 0x2c, 0x7b, 0xcd, 0x85, 0x79, 0x38, 0xa5, 0x07, 0x0a, 0x87, 0x35, 0xfe, 0x57, 0x6b, 0xff,
    0xd8, 0xf7, 0x0c, 0xfe, 0xbd, 0xf2, 0x78, 0x65, 0x16, 0x07, 0x7d, 0xbc, 0x9b, 0xcf, 0x82, 0xf0,
    0x68, 0x7c, 0xdd, 0x40, 0x51, 0x65, 0x65, 0x42, 0xe3, 0xcf, 0xb3, 0xa3, 0x16, 0x89, 0x8b, 0xd5,
    0x0e, 0x3c, 0x94, 0x5e, 0x01, 0x02, 0x81, 0x81, 0x00, 0xbc, 0x3f, 0x7b, 0x3a, 0xdf, 0x04, 0x6b,
    0x86, 0x7d, 0x12, 0x99, 0xe4, 0x36, 0xc1, 0x33, 0x9c, 0xc6, 0x31, 0x2f, 0xfc, 0xc4, 0x03, 0xe5,
    0xf0, 0xba, 0x11, 0xe7, 0x3c, 0x62, 0x95, 0x80, 0xe0, 0xa1, 0x94, 0xa2, 0xba, 0xd1, 0x2e, 0x49,
    0xf6, 0x2c, 0xb2, 0xd8, 0x76, 0x80, 0x0e, 0xa4, 0xdd, 0x89, 0x71, 0xbe, 0x56, 0x05, 0x69, 0x06,
    0x4b, 0xb5, 0x50, 0x48, 0xe5, 0x5f, 0x80, 0xed, 0x20, 0x66, 0x93, 0x93, 0xd0, 0xf6, 0x78, 0x3a,
    0x43, 0xfb, 0x99, 0xc5, 0x33, 0x18, 0x3c, 0x30, 0xf8, 0xa9, 0xf3, 0xbe, 0x2f, 0xcd, 0x28, 0x12,
    0xf8, 0x85, 0xd6, 0x44, 0x28, 0x81, 0xc7, 0xbe, 0x4c, 0x0b, 0xad, 0x4c, 0xdd, 0x72, 0x76, 0xea,
    0x7b, 0x4f, 0xc8, 0x05, 0xf9, 0xb1, 0xa2, 0x82, 0x7a, 0x0d, 0xc2, 0x8f, 0xe0, 0x6d, 0xeb, 0xe8,
    0x37, 0x24, 0xc7, 0xed, 0x3e, 0x71, 0xcb, 0xa1, 0x06
};

const char *tls_chipher(const char *chipher) {
    static char tls_chiper_current[256] = TLS_CHIPER_DEFAULT;
    if (chipher) {
        memset(tls_chiper_current, 0, sizeof(tls_chiper_current));
        strncpy(tls_chiper_current, chipher, sizeof(tls_chiper_current) - 1);
    }

    return tls_chiper_current;
}

#if (DEFINED_TLS == 1)

#include <openssl/ssl.h>
#include <openssl/err.h>

static SSL_CTX *ssl_ctx = NULL;

int tls_init(void) {
    int rc = SOCKPERF_ERR_NONE;
    SSL_CTX *ctx = NULL;

    ssl_ctx = NULL;

    SSL_library_init();
    SSL_load_error_strings();

    if (s_user_params.mode == MODE_SERVER) {
        ctx = SSL_CTX_new(TLS_server_method());
        if (!ctx) {
            log_err("Unable to create SSL context");
            rc = SOCKPERF_ERR_FATAL;
            goto err;
        }

        if (SSL_CTX_set_options(ctx, SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1 |
                                         SSL_OP_NO_TLSv1_1 | SSL_OP_NO_TLSv1_3) <= 0) {
            SSL_CTX_free(ctx);
            log_err("Unable to set protocol: %s", "TLSv1.2");
            rc = SOCKPERF_ERR_FATAL;
            goto err;
        }

        if (SSL_CTX_set_cipher_list(ctx, tls_chipher()) <= 0) {
            SSL_CTX_free(ctx);
            log_err("Unable to use cipher: %s", tls_chipher());
            rc = SOCKPERF_ERR_FATAL;
            goto err;
        }

        /* Set the key and cert */
        if (SSL_CTX_use_certificate_ASN1(ctx, sizeof(cert_der), cert_der) <= 0) {
            SSL_CTX_free(ctx);
            log_err("Unable to use certificate");
            rc = SOCKPERF_ERR_FATAL;
            goto err;
        }

        if (SSL_CTX_use_RSAPrivateKey_ASN1(ctx, key_der, sizeof(key_der)) <= 0) {
            SSL_CTX_free(ctx);
            log_err("Unable to RSA private key");
            rc = SOCKPERF_ERR_FATAL;
            goto err;
        }
    } else {
        ctx = SSL_CTX_new(TLS_client_method());
        if (!ctx) {
            log_err("Unable to create SSL context");
            rc = SOCKPERF_ERR_FATAL;
            goto err;
        }
    }

    ssl_ctx = ctx;

err:
    return rc;
}

void tls_exit(void) {
    int ifd;
    if (g_fds_array) {
        for (ifd = 0; ifd <= MAX_FDS_NUM; ifd++) {
            if (g_fds_array[ifd]) {
                SSL_free((SSL *)g_fds_array[ifd]->tls_handle);
            }
        }
    }

    if (ssl_ctx) {
        SSL_CTX_free(ssl_ctx);
        EVP_cleanup();
        ssl_ctx = NULL;
    }
}

void *tls_connect(int fd) {
    SSL *ssl = NULL;

    if (!ssl_ctx) {
        goto err;
    }

    ssl = SSL_new(ssl_ctx);
    if (!ssl) {
        log_err("Failed SSL_new()");
        goto err;
    }
    if (!SSL_set_fd(ssl, fd)) {
        log_err("Failed SSL_set_fd()");
        goto err;
    }
    if (SSL_is_server(ssl)) {
        if (SSL_accept(ssl) != 1) {
            log_err("Failed SSL_accept()");
            goto err;
        }
    } else {
        if (SSL_connect(ssl) != 1) {
            log_err("Failed SSL_connect()");
            goto err;
        }
    }

    return (void *)ssl;
err:
    if (ssl) {
        SSL_free(ssl);
    }
    return NULL;
}

int tls_write(void *handle, const void *buf, int num) {
    assert(handle);

    return SSL_write((SSL *)handle, buf, num);
}

int tls_read(void *handle, void *buf, int num) {
    assert(handle);

    return SSL_read((SSL *)handle, buf, num);
}

#else
#error Unsupported TLS
#endif

#endif /* DEFINED_TLS */
